name: Test and Deploy

on:
  push:
    branches:
      - test

jobs:
  build_test_and_merge:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set image name variables
      run: |
        COMMIT_DATE=$(git show -s --format=%cd --date=short ${GITHUB_SHA})
        TOTAL_COMMITS=$(git rev-list --count HEAD)
        IMAGE_NAME="${COMMIT_DATE}_${TOTAL_COMMITS}"
        TAG=$(git rev-parse --short=4 ${GITHUB_SHA})
        
        echo "COMMIT_DATE=$(git show -s --format=%cd --date=short ${GITHUB_SHA})" 
        echo "TOTAL_COMMITS=$(git rev-list --count HEAD)"
        echo "IMAGE_NAME=${COMMIT_DATE}_${TOTAL_COMMITS}" >> $GITHUB_ENV
        echo "TAG=$(git rev-parse --short=4 ${GITHUB_SHA})" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build -t ${IMAGE_NAME}:${TAG} .

    - name: Push image to Docker Hub
      run: |
        docker tag ${IMAGE_NAME}:${TAG} bronese/webhook-bot:${TAG}
        docker push bronese/webhook-bot:${TAG}


    # - name: Create and run container from image
    #   run: |
    #     docker create --name test-container bronese/webhook-bot:${TAG}
    #     docker start test-container
    #     docker logs test-container

    # - name: Run tests inside the container
    #   run: |
    #     TEST_RESULT=$(docker exec test-container npm test)
    #     if [ "$TEST_RESULT" != "0" ]; then
    #       echo "test fail"
    #       exit 1
    #     fi

    # - name: Merge to main
    #   if: success()
    #   run: |
    #     git config user.name "GitHub Actions"
    #     git config user.email "actions@github.com"
    #     git checkout main
    #     git merge --no-ff test
    #     git push origin main

  deploy:
    needs: build_test_and_merge
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
          registry: 167737505636.dkr.ecr.us-east-1.amazonaws.com/webhookbot

    - name: Build and push Docker image # remove redundant ECR image push at some point
      run: |
        COMMIT_DATE=$(git show -s --format=%cd --date=short ${GITHUB_SHA})
        TOTAL_COMMITS=$(git rev-list --count HEAD)
        IMAGE_NAME="${COMMIT_DATE}-${TOTAL_COMMITS}"
        TAG=$(git rev-parse --short=4 ${GITHUB_SHA})
        echo "TAG=$(git rev-parse --short=4 ${GITHUB_SHA})" >> $GITHUB_ENV        
        ECR_REPOSITORY=${{ steps.login-ecr.outputs.registry }}/webhookbot
        docker build -t $ECR_REPOSITORY:$IMAGE_NAME .
        docker push $ECR_REPOSITORY:$IMAGE_NAME

    # - name: Register new task definition and update ECS service
    #   run: |
    #     COMMIT_DATE=$(git show -s --format=%cd --date=short ${GITHUB_SHA})
    #     TOTAL_COMMITS=$(git rev-list --count HEAD)
    #     IMAGE_NAME="${COMMIT_DATE}-${TOTAL_COMMITS}"
    #     ECR_REPOSITORY=${{ steps.login-ecr.outputs.registry }}/webhookbot
    #     sed -i "s|your-ecr-repository-url|$ECR_REPOSITORY:$IMAGE_NAME|" .github/workflows/task-definition.json
    #     aws ecs register-task-definition --cli-input-json file://.github/workflows/task-definition.json
    #     aws ecs update-service --cluster webhookbot --service webhookbot --task-definition webhookbot --force-new-deployment

    - name: Deploy to ECS
      run: |
        aws ecs register-task-definition --cli-input-json file://.github/workflows/task-definition.json
        SERVICE_EXISTS=$(aws ecs list-services --cluster webhookbot --query 'serviceArns[?ends_with(@, `webhookbot`)]' --output text)
        if [ -z "$SERVICE_EXISTS" ]; then
          aws ecs create-service --cluster webhookbot --service-name webhookbot --task-definition webhookbot --desired-count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-0d3bcd472fcfed0e2,	subnet-0ff42390bba7e5ef0]}"
        else
          aws ecs update-service --cluster webhookbot --service webhookbot --task-definition webhookbot
        fi
    #    aws ecs wait services-stable --cluster webhookbot --services webhookbot
