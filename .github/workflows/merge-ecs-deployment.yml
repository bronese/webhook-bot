name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get most recent tag
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${DOCKER_HUB_USERNAME}'", "password": "'${DOCKER_HUB_PASSWORD'}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          TAG=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/bronese/webhook-bot/tags/ | jq -r '.results | sort_by(.last_updated) | reverse | .[].name')
          MOST_RECENT_TAG=$(echo "${TAGS}" | head -n 1)
          echo "MOST_RECENT_TAG=${MOST_RECENT_TAG}" >> $GITHUB_ENV

      - name: Pull Docker image
        run: docker pull bronese/webhook-bot:${MOST_RECENT_TAG}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Register new task definition
        run: |
          ECR_REPOSITORY=<your-ecr-repository-url>
          sed -i "s|your-ecr-repository-url|$ECR_REPOSITORY|" task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Update service in AWS ECS
        run: |
          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition webhookbot | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster webhookbot --service webhookbot --task-definition $TASK_DEFINITION_ARN --force-new-deployment
